// @generated by protoc-gen-es v1.2.0 with parameter "import_extension=none,target=ts"
// @generated from file argus/pdf/v1/pdf.proto (package argus.pdf.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * PDFのデータ
 *
 * @generated from message argus.pdf.v1.PDF
 */
export class PDF extends Message<PDF> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<PDF>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "argus.pdf.v1.PDF";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PDF {
    return new PDF().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PDF {
    return new PDF().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PDF {
    return new PDF().fromJsonString(jsonString, options);
  }

  static equals(a: PDF | PlainMessage<PDF> | undefined, b: PDF | PlainMessage<PDF> | undefined): boolean {
    return proto3.util.equals(PDF, a, b);
  }
}

/**
 * PDFのリクエスト
 *
 * @generated from message argus.pdf.v1.GetPDFRequest
 */
export class GetPDFRequest extends Message<GetPDFRequest> {
  /**
   * PDFのデータ
   *
   * @generated from field: argus.pdf.v1.PDF pdf = 1;
   */
  pdf?: PDF;

  constructor(data?: PartialMessage<GetPDFRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "argus.pdf.v1.GetPDFRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pdf", kind: "message", T: PDF },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPDFRequest {
    return new GetPDFRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPDFRequest {
    return new GetPDFRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPDFRequest {
    return new GetPDFRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPDFRequest | PlainMessage<GetPDFRequest> | undefined, b: GetPDFRequest | PlainMessage<GetPDFRequest> | undefined): boolean {
    return proto3.util.equals(GetPDFRequest, a, b);
  }
}

/**
 * PDFのレスポンス
 *
 * @generated from message argus.pdf.v1.GetPDFResponse
 */
export class GetPDFResponse extends Message<GetPDFResponse> {
  /**
   * @generated from field: string stauts = 1;
   */
  stauts = "";

  constructor(data?: PartialMessage<GetPDFResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "argus.pdf.v1.GetPDFResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stauts", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPDFResponse {
    return new GetPDFResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPDFResponse {
    return new GetPDFResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPDFResponse {
    return new GetPDFResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPDFResponse | PlainMessage<GetPDFResponse> | undefined, b: GetPDFResponse | PlainMessage<GetPDFResponse> | undefined): boolean {
    return proto3.util.equals(GetPDFResponse, a, b);
  }
}

