// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: argus/pdf/v1/pdf.proto

package pdfv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PDFService_GetPDF_FullMethodName = "/argus.pdf.v1.PDFService/GetPDF"
)

// PDFServiceClient is the client API for PDFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFServiceClient interface {
	// PDFを取得する
	GetPDF(ctx context.Context, in *GetPDFRequest, opts ...grpc.CallOption) (*GetPDFResponse, error)
}

type pDFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFServiceClient(cc grpc.ClientConnInterface) PDFServiceClient {
	return &pDFServiceClient{cc}
}

func (c *pDFServiceClient) GetPDF(ctx context.Context, in *GetPDFRequest, opts ...grpc.CallOption) (*GetPDFResponse, error) {
	out := new(GetPDFResponse)
	err := c.cc.Invoke(ctx, PDFService_GetPDF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFServiceServer is the server API for PDFService service.
// All implementations must embed UnimplementedPDFServiceServer
// for forward compatibility
type PDFServiceServer interface {
	// PDFを取得する
	GetPDF(context.Context, *GetPDFRequest) (*GetPDFResponse, error)
	mustEmbedUnimplementedPDFServiceServer()
}

// UnimplementedPDFServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPDFServiceServer struct {
}

func (UnimplementedPDFServiceServer) GetPDF(context.Context, *GetPDFRequest) (*GetPDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPDF not implemented")
}
func (UnimplementedPDFServiceServer) mustEmbedUnimplementedPDFServiceServer() {}

// UnsafePDFServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFServiceServer will
// result in compilation errors.
type UnsafePDFServiceServer interface {
	mustEmbedUnimplementedPDFServiceServer()
}

func RegisterPDFServiceServer(s grpc.ServiceRegistrar, srv PDFServiceServer) {
	s.RegisterService(&PDFService_ServiceDesc, srv)
}

func _PDFService_GetPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFServiceServer).GetPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFService_GetPDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFServiceServer).GetPDF(ctx, req.(*GetPDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PDFService_ServiceDesc is the grpc.ServiceDesc for PDFService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "argus.pdf.v1.PDFService",
	HandlerType: (*PDFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPDF",
			Handler:    _PDFService_GetPDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "argus/pdf/v1/pdf.proto",
}
